{"version":3,"sources":["context/chatContext.js","panels/events.js","context/chatListContext.js","panels/messages.js","hooks/useShortText.js","hooks/useLocalStorage.js","panels/profile.js","hooks/useTextDate.js","components/textSeparator.js","messageComponents/message.js","messageComponents/messageList.js","panels/chat.js","panels/chatMembersList.js","components/mapMarker.js","panels/map.js","App.js","panels/signUp.js","index.js"],"names":["socket","Events","style","height","icon","width","axios","require","Context","createContext","ChatListContextProvider","children","useState","chats","setChats","currentPage","setCurrentPage","totalCount","setTotalCount","limit","fetching","setFetching","endOfPage","setEndOfPage","useEffect","get","then","response","data","filter","e","findIndex","c","id","prev","headers","finally","window","addEventListener","scrollHandler","removeEventListener","length","target","documentElement","scrollHeight","scrollTop","innerHeight","Provider","value","Messages","onChatOpen","useContext","className","separator","map","before","gradientColor","calcInitialsAvatarColor","title","substring","onClick","subtitle","str","indicator","mode","useLocalStorage","initialValue","key","storage","localStorage","getItem","JSON","parse","setValue","setItem","stringify","Profile","d","user","hasBack","onClose","userInfo","setUserInfo","currentUser","to","size","Number","phoneNumber","username","level","bio","ID","sizeY","header","photos","after","textLevel","email","dateOfBirth","Date","toLocaleString","year","month","day","src","description","useChatContextProvider","ChatContextProvider","chat","messages","setMessages","members","setMembers","needScroll","setNeedScroll","newMessageCount","setNewMessageCount","openSocket","setOpenSocket","a","membersResponse","setTimeout","getMessages","WebSocket","openWebSocketHandler","close","scrollTo","scrollX","document","body","console","log","sendMessage","text","message","send","TextSeparator","Message","self","caption","hasAvatar","avatar","MessageList","isPublic","setScrollHeight","windowHeight","setWindowHeight","didResize","setDidResize","bottomRef","useRef","useLayoutEffect","current","scrollIntoView","behavior","scrollY","Math","abs","resizeHandler","marginTop","m","index","arr","Fragment","ref","Chat","onOpenChatMembersList","writeBarText","setWriteBarText","bottomPadding","setBottomPadding","fixedLayoutInnerElRef","status","vertical","paddingBottom","wide","onChange","onHeightChange","el","offsetHeight","updateBottomPadding","placeholder","disabled","ChatMembersList","onOpenProfile","MapMarker","timer","setTimer","stopPropagation","closest","classList","add","remove","onTouchEnd","clearTimeout","onTouchStart","preventDefault","querySelector","longTouch","MapPanel","events","bootstrapURLKeys","defaultCenter","lat","lng","defaultZoom","App","scheme","activeStory","setActiveStory","messagesActivePanel","setMessagesActivePanel","setChat","hasTabbar","setHasTabbar","setUser","onStoryChange","currentTarget","dataset","story","webviewType","justifyContent","animate","spaced","maxWidth","tabbar","selected","activePanel","user_id","React","Component","bridge","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a0d43ac3.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { createContext, useContext, useEffect, useLayoutEffect, useRef, useState } from \"react\";\r\n\r\nconst Context = createContext()\r\n\r\nexport const useChatContextProvider = () => {\r\n    return useContext(Context)\r\n}\r\n\r\nlet socket\r\n\r\nexport const ChatContextProvider = ({children, chat}) => {\r\n    const [messages, setMessages] = useState([])\r\n    const [members, setMembers] = useState([]);\r\n    const [fetching, setFetching] = useState(true);\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [totalCount, setTotalCount] = useState(0)\r\n    const [limit] = useState(30)\r\n    const [endOfPage, setEndOfPage] = useState(false)\r\n    const [needScroll, setNeedScroll] = useState(true)\r\n    const [newMessageCount, setNewMessageCount] = useState(2)\r\n    const [openSocket, setOpenSocket] = useState(false)\r\n\r\n    useEffect(async () => {\r\n        const membersResponse = await axios.get(\"https://b451dbd8trial-dev-dice.cfapps.us10.hana.ondemand.com/main/Users\")\r\n        setMembers([...membersResponse.data.value]) \r\n        setTimeout(() => {\r\n            getMessages()\r\n        }, 500)\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        socket = new WebSocket(\"ws://192.168.160.194:8087/hello\")\r\n        socket.addEventListener(\"opne\", openWebSocketHandler)\r\n        return () => {\r\n            socket.removeEventListener(\"opne\", openWebSocketHandler)\r\n            socket.close()\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (fetching && members.length > 0) {\r\n            getMessages()\r\n        }\r\n    }, [fetching])\r\n\r\n    useEffect(() => {\r\n        chat.members = members\r\n    }, [members])\r\n\r\n    const getMessages = () => {\r\n        axios\r\n            .get(`https://jsonplaceholder.typicode.com/comments?_limit=${limit}&_page=${currentPage}`)\r\n            .then(response => {\r\n                setMessages([...response.data, ...messages])\r\n                setCurrentPage(prev => prev + 1)\r\n                setTotalCount(response.headers[\"x-total-count\"])\r\n            })\r\n            .finally(() => {\r\n                setEndOfPage(false)\r\n                setFetching(false)\r\n                currentPage == 1 && window.scrollTo(window.scrollX, document.body.scrollHeight) \r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", scrollHandler)\r\n        return function () {\r\n            window.removeEventListener(\"scroll\", scrollHandler)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (endOfPage && messages.length < totalCount) {\r\n            setFetching(true)\r\n        }\r\n    }, [endOfPage])\r\n\r\n    const scrollHandler = (e) => {\r\n        setNeedScroll(false)\r\n        if (e.target.documentElement.scrollTop < 100) {\r\n            setEndOfPage(true)\r\n        }\r\n        if (e.target.documentElement.scrollHeight - (e.target.documentElement.scrollTop + window.innerHeight) < 100) {\r\n            setNeedScroll(true)\r\n        }\r\n    }\r\n\r\n    const sendMessage = (text) => {\r\n        setNeedScroll(true)\r\n        const message = {\r\n            \"senderId\": 1,\r\n            \"chatId\": 2,\r\n            \"email\": \"test@test.test\",\r\n            \"body\": text\r\n        }\r\n        socket.send(JSON.stringify(message))\r\n        setMessages([...messages, message])\r\n        setNewMessageCount(prev => prev + 1)\r\n    }\r\n\r\n    const openWebSocketHandler = (e) => {\r\n        setOpenSocket(true)\r\n        console.log(e);\r\n    }\r\n\r\n    return (\r\n        <Context.Provider value={{\r\n            messages,\r\n            fetching,\r\n            members, \r\n            chat,\r\n            needScroll,\r\n            limit,\r\n            currentPage,\r\n            sendMessage,\r\n            endOfPage,\r\n            newMessageCount,\r\n            openSocket\r\n        }}>\r\n            {children}\r\n        </Context.Provider>\r\n    )\r\n}","import { Icon56NewsfeedOutline } from \"@vkontakte/icons\"\r\nimport { Group, PanelHeader, PanelHeaderBack, Placeholder } from \"@vkontakte/vkui\"\r\n\r\nexport const Events = () => {\r\n    return (\r\n        <>\r\n            <PanelHeader>События</PanelHeader>\r\n            <Group style={{ height: \"1000px\" }}>\r\n                <Placeholder\r\n                    icon={<Icon56NewsfeedOutline width={56} height={56} />}\r\n                />\r\n            </Group>\r\n        </>\r\n    )\r\n}\r\n","import { createContext, useContext, useEffect, useState } from \"react\";\r\nconst axios = require('axios');\r\n\r\nconst Context = createContext()\r\n\r\nexport const useChatListContextProvider = () => {\r\n    return useContext(Context)\r\n}\r\n\r\nexport const ChatListContextProvider = ({children}) => {\r\n\r\n    const [chats, setChats] = useState([])\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [totalCount, setTotalCount] = useState(0)\r\n    const [limit] = useState(15)\r\n    const [fetching, setFetching] = useState(true)\r\n    const [endOfPage, setEndOfPage] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (fetching) {\r\n            axios\r\n                .get(`https://jsonplaceholder.typicode.com/posts?_limit=${limit}&_page=${currentPage}`)\r\n                .then(response => {\r\n                    setChats([...chats, ...response.data.filter(e => chats.findIndex(c => c.id == e.id) < 0)])\r\n                    setCurrentPage(prev => prev + 1)\r\n                    setTotalCount(response.headers[\"x-total-count\"])\r\n                })\r\n                .finally(() => {\r\n                    setEndOfPage(false)\r\n                    setFetching(false)\r\n                })\r\n        }\r\n    }, [fetching])\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", scrollHandler)\r\n        return function () {\r\n            window.removeEventListener(\"scroll\", scrollHandler)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (endOfPage && chats.length < totalCount) {\r\n            setFetching(true)\r\n        }\r\n    }, [endOfPage])\r\n\r\n    const scrollHandler = (e) => {\r\n        if (e.target.documentElement.scrollHeight - (e.target.documentElement.scrollTop + window.innerHeight) < 100) {\r\n            setEndOfPage(true)\r\n        }\r\n    }\r\n\r\n    const newMessageHandler = (message) => {\r\n        const index = chats.findIndex(e => e.id == message.id)\r\n        if (index > -1) {\r\n            const temp = [...chats]\r\n            temp.splice(index, 1)\r\n            setChats([message, ...temp])\r\n        } else {\r\n            setChats([message, ...chats])\r\n        };\r\n    }\r\n\r\n    return (\r\n        <Context.Provider value={{\r\n            chats,\r\n            fetching\r\n        }}>\r\n            {children}\r\n        </Context.Provider>\r\n    )\r\n}","import { calcInitialsAvatarColor, Counter, Group, InitialsAvatar, List, PanelHeader, RichCell, SimpleCell, Spinner, Text, Title } from \"@vkontakte/vkui\"\r\nimport { useEffect } from \"react\"\r\nimport { useChatListContextProvider } from \"../context/chatListContext\"\r\nimport { useShortText } from \"../hooks/useShortText\"\r\n\r\nexport const Messages = ({onChatOpen}) => {\r\n\r\n    const { chats, fetching } = useChatListContextProvider()\r\n\r\n    return (\r\n        <>\r\n            <PanelHeader className=\"shadowPanelHeader\" separator={false}>Сообщения</PanelHeader>\r\n            <Group>\r\n                <List>\r\n                    {\r\n                        chats.map(e => {\r\n                            return (\r\n                                <SimpleCell\r\n                                    before={\r\n                                        <InitialsAvatar gradientColor={calcInitialsAvatarColor(e.id)}>\r\n                                            {e.title.substring(0, 2)}\r\n                                        </InitialsAvatar>}\r\n                                    key={e.id}\r\n                                    onClick={() => onChatOpen(e)}\r\n                                    subtitle={\r\n                                        <>{useShortText(\"Алексей: стикер cnbrth cnbrth cnbrth cnbrt\", 25)} &#183; 2h</>\r\n                                    }\r\n                                    indicator={<Counter mode=\"primary\">10</Counter>}\r\n                                >\r\n                                    {e.title.substring(0, 10)}\r\n                                </SimpleCell>\r\n                            )\r\n                        })\r\n                    }\r\n                    {fetching && <Spinner />}\r\n                </List>\r\n            </Group>\r\n        </>\r\n    )\r\n}","export const useShortText = (str, length) => {\r\n    return str.length > length ? str.substring(0, length) + \"...\" : str\r\n}","import { useEffect, useState } from \"react\"\r\n\r\nexport const useLocalStorage = (initialValue, key) => {\r\n    const getValue = () => {\r\n        const storage = localStorage.getItem(key)\r\n        if (storage) {\r\n            return JSON.parse(storage)\r\n        }\r\n        return initialValue\r\n    }\r\n\r\n    const [value, setValue] = useState(getValue)\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(key, JSON.stringify(value))\r\n    }, value)\r\n\r\n    return [value, setValue]\r\n}","import {\r\n    Icon24CactusOutline,\r\n    Icon24CalendarOutline,\r\n    Icon24MailOutline,\r\n    Icon24MessageOutline,\r\n    Icon24UserAddOutline} from \"@vkontakte/icons\"\r\nimport {Group, PanelHeader, Button, Gradient, Text, SimpleCell, UsersStack, MiniInfoCell, Spinner, calcInitialsAvatarColor, InitialsAvatar, PanelHeaderBack} from \"@vkontakte/vkui\"\r\nimport {Header, Avatar, Title, Cell, List} from \"@vkontakte/vkui\";\r\nimport {ButtonGroup} from \"@vkontakte/vkui\";\r\nimport { Icon24ChevronCompactRight } from '@vkontakte/icons';\r\nimport { Icon24PhoneOutline } from '@vkontakte/icons';\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useTextDate } from \"../hooks/useTextDate\";\r\nimport { useLocalStorage } from \"../hooks/useLocalStorage\";\r\n\r\nexport const Profile = ({user, hasBack, onClose}) => {\r\n    const [userInfo, setUserInfo] = useState(null)\r\n    const [currentUser] = useLocalStorage(null, \"user\")\r\n\r\n    useEffect(() => {\r\n        axios\r\n            .get(`https://b451dbd8trial-dev-dice.cfapps.us10.hana.ondemand.com/main/Users/${user}`)\r\n            .then(response => {\r\n                setUserInfo(response.data)\r\n            })\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n                <PanelHeader \r\n                    className=\"shadowPanelHeader\" \r\n                    separator={false}\r\n                    before={hasBack && <PanelHeaderBack onClick={onClose}/>}\r\n                >\r\n                    Профиль\r\n                </PanelHeader>\r\n            {!userInfo && <Group><Spinner /></Group>}\r\n            {userInfo && \r\n                <>\r\n                    <Group>\r\n                        <Gradient\r\n                            mode=\"tint\"\r\n                            to=\"top\"\r\n                            className=\"profileBIO\"\r\n                        >\r\n                            <InitialsAvatar size={96} gradientColor={calcInitialsAvatarColor(Number(userInfo.phoneNumber % 10))}>\r\n                                {userInfo.username.substring(0, 2)}\r\n                            </InitialsAvatar>\r\n                            <Title level=\"2\" width=\"2\" className=\"profileTitle\">\r\n                                {userInfo.username}\r\n                            </Title>\r\n                            <Text className=\"profileSubTitle\">\r\n                                {userInfo.bio}\r\n                            </Text>\r\n                            {currentUser != userInfo.ID && \r\n                                <ButtonGroup>\r\n                                    <Button size=\"m\" sizeY=\"compact\"><Icon24UserAddOutline /></Button>\r\n                                    <Button\r\n                                        size=\"m\"\r\n                                        sizeY=\"compact\"\r\n                                        before={<Icon24MessageOutline />}\r\n                                    >\r\n                                        Написать\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            }\r\n                        </Gradient>\r\n                        <Group header={<Header mode=\"secondary\">Друзья</Header>}>\r\n                            <SimpleCell className=\"profileFriends\"\r\n                                before={\r\n                                    <UsersStack\r\n                                        size=\"m\"\r\n                                        photos={[\r\n                                            \"https://www.iphones.ru/wp-content/uploads/2021/09/%D0%A1%D0%BD%D0%B8%D0%BC%D0%BE%D0%BA-%D1%8D%D0%BA%D1%80%D0%B0%D0%BD%D0%B0-2021-09-07-%D0%B2-19.48.05.jpg\",\r\n                                            \"https://www.ixbt.com/img/n1/news/2018/7/4/341109.png\",\r\n                                            \"https://cdni.rt.com/russian/images/2022.09/article/63231abe02e8bd743524f678.png\"\r\n                                        ]}\r\n                                    >\r\n                                    </UsersStack>\r\n                                }\r\n                                after={\r\n                                    <Icon24ChevronCompactRight width={30} height={30} />\r\n                                }\r\n                            >\r\n                                1377 друзей\r\n                            </SimpleCell>\r\n                        </Group>\r\n                    </Group>\r\n                    <Group header={<Header mode=\"secondary\">Информация</Header>}>\r\n                        <MiniInfoCell before={<Icon24PhoneOutline />} textLevel=\"primary\">\r\n                            {userInfo.phoneNumber}\r\n                        </MiniInfoCell>\r\n                        <MiniInfoCell before={<Icon24MailOutline />} textLevel=\"primary\">\r\n                            {userInfo.email}\r\n                        </MiniInfoCell>\r\n                        <MiniInfoCell before={<Icon24CalendarOutline />} textLevel=\"primary\">\r\n                            {useTextDate(userInfo.dateOfBirth)}\r\n                        </MiniInfoCell>\r\n                    </Group>\r\n                    <Group header={<Header mode=\"secondary\">Любимые игры</Header>}>\r\n                        <List>\r\n                            <Cell\r\n                                before={<Avatar src={\"https://s2-goods.ozstatic.by/2000/42/893/10/10893042_0.jpg\"} />}\r\n                                description=\"Carcassonne\"\r\n                            >\r\n                                Каркассон\r\n                            </Cell>\r\n                            <Cell\r\n                                before={<Avatar\r\n                                    src={\"https://avatars.mds.yandex.net/get-mpic/6382710/img_id8546741754982085445.jpeg/orig\"} />}\r\n                                description=\"Monopoly\"\r\n                            >\r\n                                Монополия\r\n                            </Cell>\r\n                            <Cell\r\n                                before={<Avatar\r\n                                    src={\"https://igromaster.by/upload/iblock/972/972ee18fcf89183f221bab04bcff0668.jpg\"} />}\r\n                                description=\"Uno\"\r\n                            >\r\n                                У́но\r\n                            </Cell>\r\n                        </List>\r\n                    </Group>\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n}","export const useTextDate = (d) => {\r\n    const date = new Date(d)\r\n    return date.toLocaleString(\"ru-RU\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        day: \"numeric\"\r\n    })\r\n}","import { Header } from \"@vkontakte/vkui\";\r\n\r\nexport const TextSeparator = ({text}) => {\r\n    return ( \r\n        <div className=\"textSeparator\">\r\n            <div className=\"line\"></div>\r\n            <div className=\"text\">\r\n                {text}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n ","import { Avatar, calcInitialsAvatarColor, InitialsAvatar } from \"@vkontakte/vkui\"\r\n\r\nexport const Message = ({\r\n    self = false, \r\n    text,\r\n    caption = \"\",\r\n    hasAvatar = false,\r\n    avatar,\r\n    title,\r\n    id\r\n\r\n}) => {\r\n    return (\r\n        <div className={`messageBox ${self ? \"self\" : \"\"}`}>\r\n            {hasAvatar && avatar && <Avatar size={25}/>}\r\n            {hasAvatar && !avatar && \r\n                <InitialsAvatar size={25} gradientColor={calcInitialsAvatarColor(id)}>\r\n                    {title.substring(0, 2)}\r\n                </InitialsAvatar>\r\n            }\r\n            <div className={`messageTextBox ${self ? \"self\" : \"\"}`}>\r\n                {!self && <div className=\"messageTitle\">{title}</div>}\r\n                <div>{text}</div>\r\n                {caption && <div className=\"messageCaption\">{caption}</div>}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { Separator, Spinner } from \"@vkontakte/vkui\";\r\nimport React, { useEffect, useLayoutEffect, useRef, useState } from \"react\"\r\nimport { TextSeparator } from \"../components/textSeparator\";\r\nimport { useChatContextProvider } from \"../context/chatContext\";\r\nimport { Message } from \"./message\"\r\n\r\nexport const MessageList = ({ isPublic = true}) => {\r\n    const [scrollHeight, setScrollHeight] = useState(0)\r\n    const { messages, fetching, needScroll, newMessageCount, endOfPage } = useChatContextProvider()\r\n    const [windowHeight, setWindowHeight] = useState(window.innerHeight)\r\n    const [didResize, setDidResize] = useState(false)\r\n\r\n    const bottomRef = useRef(null)\r\n\r\n    useLayoutEffect(() => {\r\n        if (endOfPage) {\r\n            window.scrollTo(\r\n                window.scrollX,\r\n                document.body.scrollTop + document.documentElement.scrollHeight - scrollHeight\r\n            )\r\n        }\r\n        if(needScroll) {\r\n            bottomRef.current.scrollIntoView({ behavior: \"smooth\"})\r\n        }\r\n    }, [messages]);\r\n\r\n    useLayoutEffect(() => {\r\n        if (endOfPage) {\r\n            setScrollHeight(document.documentElement.scrollHeight)\r\n        }\r\n    }, [endOfPage])\r\n\r\n    useEffect(() => {\r\n        if (didResize) {\r\n            if (windowHeight - window.innerHeight > 0) {\r\n                window.scrollTo(window.scrollX, window.scrollY + windowHeight - window.innerHeight)\r\n            } \r\n            if (windowHeight - window.innerHeight < 0) {\r\n                if (document.documentElement.scrollHeight - (document.documentElement.scrollTop + window.innerHeight) > Math.abs(windowHeight - window.innerHeight)) {\r\n                    window.scrollTo(window.scrollX, window.scrollY + windowHeight - window.innerHeight)\r\n                }\r\n            }\r\n            \r\n            setWindowHeight(window.innerHeight)\r\n            setDidResize(false)\r\n        }\r\n    }, [didResize])\r\n\r\n    const resizeHandler = () => {\r\n        setDidResize(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"resize\", resizeHandler)\r\n        return () => window.removeEventListener(\"resize\", resizeHandler)\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            {fetching && <Spinner style={{marginTop: 10}} />} \r\n           \r\n            <div className=\"messageList\">\r\n                {messages.map(((m, index, arr) => {\r\n                    return ( \r\n                        <React.Fragment key={index}>\r\n                            {arr.length - index == newMessageCount && <TextSeparator text=\"Новые сообщения\" />}\r\n                            <Message\r\n                                text={m.body}\r\n                                caption={m.id}\r\n                                hasAvatar={m.id % 2 == 1 && isPublic}\r\n                                self={m.id % 2 == 0}\r\n                                title={isPublic && m.email}\r\n                                avatar={m.avatar}\r\n                                id={m.id}\r\n                            />\r\n                            {/* {arr[index + 1] ? m.id - arr[index + 1].id == 59 && <TextSeparator text={`${m.id - 59}-${m.id - 60 + 30}`} /> : <></>} */}\r\n                        </React.Fragment>\r\n                    )\r\n                }))}\r\n            </div>\r\n            <div ref={bottomRef}></div>\r\n        </>\r\n    )\r\n}","import { calcInitialsAvatarColor, Card, Cell, FixedLayout, Group, InitialsAvatar, PanelHeader, PanelHeaderBack, PanelHeaderButton, PanelHeaderContent, Separator, WriteBar, WriteBarIcon } from \"@vkontakte/vkui\"\r\nimport { Fragment, useEffect, useRef, useState } from \"react\";\r\nimport { useChatContextProvider } from \"../context/chatContext\";\r\nimport { MessageList } from \"../messageComponents/messageList\";\r\nimport { Icon28Users3Outline } from '@vkontakte/icons';\r\n\r\nexport const Chat = ({\r\n    onClose,\r\n    onOpenChatMembersList\r\n}) => {\r\n    const [writeBarText, setWriteBarText] = useState(\"\")\r\n    const [bottomPadding, setBottomPadding] = useState(0);\r\n\r\n    const fixedLayoutInnerElRef = useRef();\r\n\r\n    const { chat, sendMessage, openSocket, members } = useChatContextProvider()\r\n\r\n    const updateBottomPadding = () => {\r\n        const el = fixedLayoutInnerElRef.current;\r\n        if (el) {\r\n            const height = el.offsetHeight;\r\n            if (height !== bottomPadding) {\r\n                setBottomPadding(height);\r\n            }\r\n        }\r\n    };\r\n\r\n    const sendMessageHandler = () => {\r\n        sendMessage(writeBarText)\r\n        setWriteBarText(\"\")\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <PanelHeader\r\n                className=\"shadowPanelHeader\" \r\n                separator={false} \r\n                before={\r\n                    <PanelHeaderBack \r\n                        onClick={onClose}\r\n                    />}\r\n                after={members.length > 0 &&\r\n                    <PanelHeaderButton onClick={onOpenChatMembersList}>\r\n                        <Icon28Users3Outline/>\r\n                    </PanelHeaderButton>\r\n                }\r\n            >\r\n                <PanelHeaderContent\r\n                    before={\r\n                        <InitialsAvatar size={36} gradientColor={calcInitialsAvatarColor(chat.id)}>\r\n                            {chat.title.substring(0, 2)}\r\n                        </InitialsAvatar>\r\n                    }\r\n                    status={`${members.length} участников`}\r\n                >\r\n                    {chat.title.substring(0, 10)}\r\n                </PanelHeaderContent>\r\n            </PanelHeader>\r\n            <MessageList/>\r\n            <FixedLayout\r\n                vertical=\"bottom\"\r\n                style={{paddingBottom: 0}}\r\n            >\r\n                <div ref={fixedLayoutInnerElRef}>\r\n                    <Separator wide />\r\n                    <WriteBar\r\n                        value={writeBarText}\r\n                        onChange={(e) => setWriteBarText(e.target.value)}\r\n                        onHeightChange={() => updateBottomPadding()}\r\n                        placeholder=\"Сообщение\"\r\n                        after={\r\n                            <Fragment>\r\n                                <WriteBarIcon \r\n                                    mode=\"send\" \r\n                                    disabled={writeBarText.length === 0 || !openSocket}\r\n                                    onClick={() => sendMessageHandler()}\r\n                                />\r\n                            </Fragment>\r\n                        }\r\n                    />\r\n                </div>\r\n            </FixedLayout>\r\n        </>\r\n    )\r\n}","import { Avatar, calcInitialsAvatarColor, Cell, Group, Header, InitialsAvatar, List, PanelHeader, PanelHeaderBack, Separator, SimpleCell, Title } from \"@vkontakte/vkui\";\r\n\r\nexport const ChatMembersList = ({ onClose, chat, onOpenProfile }) => {\r\n    return ( \r\n        <>\r\n            <PanelHeader \r\n                className=\"shadowPanelHeader\" \r\n                separator={false}\r\n                before={\r\n                    <PanelHeaderBack\r\n                        onClick={onClose}\r\n                    />\r\n                }\r\n            >\r\n                Участники\r\n            </PanelHeader>\r\n            <Group className=\"d-f-center\">\r\n                <InitialsAvatar size={100} gradientColor={calcInitialsAvatarColor(chat.id)}>\r\n                    {chat.title.substring(0, 2)}\r\n                </InitialsAvatar>\r\n                <Title>{chat.title.substring(0, 10)}</Title>\r\n            </Group>\r\n            <Group>\r\n                <List>\r\n                    {chat.members.map(e =>\r\n                        <SimpleCell\r\n                            before={\r\n                                <InitialsAvatar size={48} gradientColor={calcInitialsAvatarColor(Number(e.phoneNumber % 10))}>\r\n                                    {e.username.substring(0, 2)}\r\n                                </InitialsAvatar>\r\n                            }\r\n                            key={e.ID}\r\n                            subtitle={e.bio}\r\n                            onClick={() => onOpenProfile(e.ID)}\r\n                        >\r\n                            {e.username}\r\n                        </SimpleCell>\r\n                    )}\r\n                </List>\r\n            </Group>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from \"react\";\r\nimport { Icon24Add } from '@vkontakte/icons';\r\n\r\nexport const MapMarker = () => {\r\n\r\n    const [timer, setTimer] = useState(null)\r\n\r\n    const onClickHandler = (e) => {\r\n        e.stopPropagation()\r\n        console.log(e.target);\r\n        e.target.closest(\".mapMarkerInner\").classList.add(\"clicked\")\r\n        setTimeout(() => {\r\n            e.target.closest(\".mapMarkerInner\").classList.remove(\"clicked\")\r\n        }, 100)\r\n    }\r\n\r\n    const longTouch = (e) => {\r\n        e.target.closest(\".mapMarkerInner\").querySelector(\".mapMarkerMore\").classList.add(\"touch\")\r\n        e.target.closest(\".mapMarkerInner\").querySelector(\".close\").classList.add(\"active\")\r\n    }\r\n\r\n    const onTouchStartHandler = (e) => {\r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n        setTimer(setTimeout(() => longTouch(e), 700))\r\n    }\r\n\r\n    const onTouchEndHandler = (e) => {\r\n        clearTimeout(timer)\r\n    }\r\n\r\n    const close = (e) => {\r\n        e.stopPropagation()\r\n        e.target.closest(\".mapMarkerInner\").querySelector(\".mapMarkerMore\").classList.remove(\"touch\")\r\n        e.target.closest(\".mapMarkerInner\").querySelector(\".close\").classList.remove(\"active\")\r\n    }\r\n\r\n    return (\r\n        <div className=\"mapMarkerWrapper\">\r\n            <div onClick={onClickHandler} onTouchEnd={onTouchEndHandler} onTouchStart={onTouchStartHandler} className=\"mapMarkerInner\">\r\n                <div className=\"mapMarkerInfo\">\r\n                    <div className=\"mapMarkerContent\">\r\n                        <div className=\"mapMarkerTitle\">Название ивента</div>\r\n                        <div className=\"mapMarkerText\">10.09.2022 10:00</div>\r\n                        <div className=\"mapMarkerMore\">какая-то дополнительная информация об ивента</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"mapBottom\">\r\n\r\n                </div>\r\n                <div className=\"close\" onClick={close}>\r\n                    <Icon24Add width={15} height={15}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { Group, PanelHeader, Spinner } from \"@vkontakte/vkui\"\r\nimport GoogleMapReact from 'google-map-react';\r\nimport { useState } from \"react\";\r\nimport { MapMarker } from \"../components/mapMarker\";\r\n\r\nexport const MapPanel = () => {\r\n\r\n    const [events, setEvents] = useState([])\r\n\r\n    return (\r\n        <>\r\n            <PanelHeader separator={false} className=\"shadowPanelHeader\">\r\n                Карта событий\r\n            </PanelHeader>\r\n            <Group className=\"mapGroup\">\r\n                {!events && <Spinner/>}\r\n                {events && <GoogleMapReact\r\n                    bootstrapURLKeys={{ key: \"AIzaSyBY3XkvjucuJx55bzFZMTJQnYH5JnWK8SQ\" }}\r\n                    defaultCenter={{\r\n                        lat: 53.90478949220637,\r\n                        lng: 27.54735640149058\r\n                    }}\r\n                    defaultZoom={17}\r\n                >\r\n                    <MapMarker lat={53.90478949220637} lng={27.54735640149058} />\r\n                    <MapMarker lat={53.886469185056136} lng={27.53915628552071} />\r\n                    <MapMarker lat={53.887077641997124} lng={27.535944819314054} />\r\n                    <MapMarker lat={53.88911935332895} lng={27.536236386276723} />\r\n                </GoogleMapReact>}\r\n            </Group>\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { View, AdaptivityProvider, AppRoot, ConfigProvider, SplitLayout, SplitCol, PanelHeader, Epic, Tabbar, TabbarItem, Panel } from '@vkontakte/vkui';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\nimport './styles/index.css'\r\nimport { Icon28MessageOutline, Icon28NewsfeedOutline, Icon28PlaceOutline, Icon28UserCircleOutline } from '@vkontakte/icons';\r\nimport { Events } from './panels/events';\r\nimport { Messages } from './panels/messages';\r\nimport { Profile } from './panels/profile';\r\nimport { Chat } from './panels/chat';\r\nimport { ChatListContextProvider } from './context/chatListContext';\r\nimport { ChatContextProvider } from './context/chatContext';\r\nimport { ChatMembersList } from './panels/chatMembersList';\r\nimport { useLocalStorage } from './hooks/useLocalStorage';\r\nimport { MapPanel } from './panels/map';\r\n\r\nconst App = () => {\r\n\tconst [scheme, setScheme] = useState('bright_light')\r\n\tconst [activeStory, setActiveStory] = useState(\"map\")\r\n\tconst [messagesActivePanel, setMessagesActivePanel] = useState(\"messages\")\r\n\tconst [chat, setChat] = useState(null)\r\n\tconst [hasTabbar, setHasTabbar] = useState(true)\r\n\tconst [currentUser] = useLocalStorage(null, \"user\")\r\n\tconst [user, setUser] = useState(currentUser)\r\n\r\n\tconst onStoryChange = (e) => setActiveStory(e.currentTarget.dataset.story)\r\n\r\n\tconst openChatHandler = (chat) => {\r\n\t\tsetChat(chat)\r\n\t\tsetMessagesActivePanel(\"chat\")\r\n\t\tsetHasTabbar(false)\r\n\t}\r\n\r\n\tconst openChatMembersHandler = (chat) => {\r\n\t\tsetMessagesActivePanel(\"chatMembers\")\r\n\t}\r\n\r\n\tconst closeChatHanler = () => {\r\n\t\tsetMessagesActivePanel(\"messages\")\r\n\t\tsetHasTabbar(true)\r\n\t}\r\n\r\n\tconst closeChatMembersHandler = () => {\r\n\t\tsetMessagesActivePanel(\"chat\")\r\n\t}\r\n\r\n\tconst openProfileHandler = (user_id) => {\r\n\t\tsetUser(user_id)\r\n\t\tsetActiveStory(\"profile\")\r\n\t}\r\n\r\n\tconst closeProfileHandler = () => {\r\n\t\tsetUser(currentUser)\r\n\t\tsetActiveStory(\"messages\")\r\n\t}\r\n\r\n\treturn (\r\n\t\t<ConfigProvider scheme={scheme} webviewType=\"internal\">\r\n\t\t\t<AdaptivityProvider>\r\n\t\t\t\t<AppRoot>\r\n\t\t\t\t\t<SplitLayout\r\n\t\t\t\t\t\theader={<PanelHeader separator={false} />}\r\n\t\t\t\t\t\tstyle={{ justifyContent: \"center\" }}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<SplitCol\r\n\t\t\t\t\t\t\tanimate={true}\r\n\t\t\t\t\t\t\tspaced={false}\r\n\t\t\t\t\t\t\twidth={\"100%\"}\r\n\t\t\t\t\t\t\tmaxWidth={\"100%\"}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Epic\r\n\t\t\t\t\t\t\t\tactiveStory={activeStory}\r\n\t\t\t\t\t\t\t\ttabbar={hasTabbar &&\r\n\t\t\t\t\t\t\t\t\t<Tabbar>\r\n\t\t\t\t\t\t\t\t\t\t<TabbarItem\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={onStoryChange}\r\n\t\t\t\t\t\t\t\t\t\t\tselected={activeStory === \"events\"}\r\n\t\t\t\t\t\t\t\t\t\t\tdata-story=\"events\"\r\n\t\t\t\t\t\t\t\t\t\t\ttext=\"События\"\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<Icon28NewsfeedOutline />\r\n\t\t\t\t\t\t\t\t\t\t</TabbarItem>\r\n\t\t\t\t\t\t\t\t\t\t<TabbarItem\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={onStoryChange}\r\n\t\t\t\t\t\t\t\t\t\t\tselected={activeStory === \"map\"}\r\n\t\t\t\t\t\t\t\t\t\t\tdata-story=\"map\"\r\n\t\t\t\t\t\t\t\t\t\t\ttext=\"Карта\"\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<Icon28PlaceOutline />\r\n\t\t\t\t\t\t\t\t\t\t</TabbarItem>\r\n\t\t\t\t\t\t\t\t\t\t<TabbarItem\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={onStoryChange}\r\n\t\t\t\t\t\t\t\t\t\t\tselected={activeStory === \"messages\"}\r\n\t\t\t\t\t\t\t\t\t\t\tdata-story=\"messages\"\r\n\t\t\t\t\t\t\t\t\t\t\ttext=\"Сообщения\"\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<Icon28MessageOutline />\r\n\t\t\t\t\t\t\t\t\t\t</TabbarItem>\r\n\t\t\t\t\t\t\t\t\t\t<TabbarItem\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={onStoryChange}\r\n\t\t\t\t\t\t\t\t\t\t\tselected={activeStory === \"profile\"}\r\n\t\t\t\t\t\t\t\t\t\t\tdata-story=\"profile\"\r\n\t\t\t\t\t\t\t\t\t\t\ttext=\"Профиль\"\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<Icon28UserCircleOutline />\r\n\t\t\t\t\t\t\t\t\t\t</TabbarItem>\r\n\t\t\t\t\t\t\t\t\t</Tabbar>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<View id=\"events\" activePanel=\"events\">\r\n\t\t\t\t\t\t\t\t\t<Panel id=\"events\">\r\n\t\t\t\t\t\t\t\t\t\t<Events />\r\n\t\t\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t\t\t<View id=\"map\" activePanel='map'>\r\n\t\t\t\t\t\t\t\t\t<Panel id='map'>\r\n\t\t\t\t\t\t\t\t\t\t<MapPanel/>\r\n\t\t\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t\t\t<View id=\"messages\" activePanel={messagesActivePanel}>\r\n\t\t\t\t\t\t\t\t\t<Panel id=\"messages\">\r\n\t\t\t\t\t\t\t\t\t\t<ChatListContextProvider>\r\n\t\t\t\t\t\t\t\t\t\t\t<Messages\r\n\t\t\t\t\t\t\t\t\t\t\t\tonChatOpen={openChatHandler}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t</ChatListContextProvider>\r\n\t\t\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t\t\t\t<Panel id=\"chat\" className=\"chatPanel\">\r\n\t\t\t\t\t\t\t\t\t\t<ChatContextProvider chat={chat}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Chat \r\n\t\t\t\t\t\t\t\t\t\t\t\tonClose={closeChatHanler} \r\n\t\t\t\t\t\t\t\t\t\t\t\tonOpenChatMembersList={openChatMembersHandler}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t</ChatContextProvider>\r\n\t\t\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t\t\t\t<Panel id=\"chatMembers\">\r\n\t\t\t\t\t\t\t\t\t\t<ChatMembersList onOpenProfile={openProfileHandler} chat={chat} onClose={closeChatMembersHandler}/>\r\n\t\t\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t\t\t<View id=\"profile\" activePanel=\"profile\">\r\n\t\t\t\t\t\t\t\t\t<Panel id=\"profile\">\r\n\t\t\t\t\t\t\t\t\t\t<Profile hasBack={!hasTabbar} onClose={closeProfileHandler} user={user}/>\r\n\t\t\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t\t</Epic>\r\n\t\t\t\t\t\t</SplitCol>\r\n\t\t\t\t\t</SplitLayout>\r\n\t\t\t\t</AppRoot>\r\n\t\t\t</AdaptivityProvider>\r\n\t\t</ConfigProvider>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import { Group, PanelHeader, View, Panel, Button, FormLayout, FormItem, Input, FormLayoutGroup, DatePicker, Select, Textarea, Checkbox, Link, ConfigProvider, AdaptivityProvider, AppRoot, SplitLayout, } from \"@vkontakte/vkui\"\r\nimport React from \"react\";\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\n\r\nclass SignUp extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            password1: \"\",\r\n            password2: \"\",\r\n            purpose: \"\",\r\n            showPatronym: true,\r\n        };\r\n\r\n        this.addressItems = [\r\n            { label: \"Город\", name: \"city\" },\r\n            { label: \"Улица\", name: \"street\" },\r\n            { label: \"Дом\", name: \"build\" },\r\n        ];\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onRemove = this.onRemove.bind(this);\r\n    }\r\n\r\n    onChange(e) {\r\n        const { name, value } = e.currentTarget;\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    onShowPatronym() {\r\n        this.setState({ showPatronym: true });\r\n    }\r\n\r\n    onRemove(e) {\r\n        this.setState({ showPatronym: false });\r\n    }\r\n\r\n    render() {\r\n        const { email, password1, password2, purpose, showPatronym } = this.state;\r\n\r\n        return (\r\n            <ConfigProvider>\r\n                <AdaptivityProvider>\r\n                    <AppRoot>\r\n                        <SplitLayout\r\n                            header={<PanelHeader separator={false} />}\r\n                            style={{ justifyContent: \"center\" }}\r\n                        >\r\n                            <View activePanel=\"new-user\">\r\n                                <Panel id=\"new-user\">\r\n                                    <PanelHeader>Регистрация</PanelHeader>\r\n                                    <Group>\r\n                                        <FormLayout>\r\n                                            <FormItem\r\n                                                top=\"E-mail\"\r\n                                                status={email ? \"valid\" : \"error\"}\r\n                                                bottom={\r\n                                                    email\r\n                                                        ? \"Электронная почта введена верно!\"\r\n                                                        : \"Пожалуйста, введите электронную почту\"\r\n                                                }\r\n                                            >\r\n                                                <Input\r\n                                                    type=\"email\"\r\n                                                    name=\"email\"\r\n                                                    value={email}\r\n                                                    onChange={this.onChange}\r\n                                                />\r\n                                            </FormItem>\r\n\r\n                                            <FormLayoutGroup >\r\n                                                <FormItem top=\"Никнейм\">\r\n                                                    <Input />\r\n                                                </FormItem>\r\n                                            </FormLayoutGroup>\r\n\r\n                                            <FormItem top=\"Пароль\">\r\n                                                <Input\r\n                                                    type=\"password\"\r\n                                                    name=\"password1\"\r\n                                                    value={password1}\r\n                                                    onChange={this.onChange}\r\n                                                    placeholder=\"Введите пароль\"\r\n                                                />\r\n                                            </FormItem>\r\n\r\n                                            <FormItem\r\n                                                status={password1 != \"\" ?\r\n                                                    password2 != \"\" ?\r\n                                                        password1 == password2 ? \"valid\" : \"error\"\r\n                                                        : \"default\"\r\n                                                    : \"default\"}\r\n                                                bottom={\r\n                                                    password1 != \"\" ?\r\n                                                        password2 != \"\" ?\r\n                                                            password1 == password2 ? \"Пароли совпадают!\" : \"Пожалуйста, введите корректный пароль\"\r\n                                                            : \"Пароль может содержать только латинские буквы и цифры\"\r\n                                                        : \"Пароль может содержать только латинские буквы и цифры\"\r\n                                                }>\r\n                                                <Input\r\n                                                    type=\"password\"\r\n                                                    name=\"password2\"\r\n                                                    value={password2}\r\n                                                    onChange={this.onChange}\r\n                                                    placeholder=\"Повторите пароль\"\r\n                                                />\r\n                                            </FormItem>\r\n\r\n                                            <FormLayoutGroup>\r\n                                                <FormItem top=\"Номер телефона\">\r\n                                                    <Input type=\"phone\" placeholder=\"+375290000000\" />\r\n                                                </FormItem>\r\n                                            </FormLayoutGroup>\r\n\r\n                                            <FormItem top=\"Дата рождения\">\r\n                                                <DatePicker\r\n                                                    min={{ day: 1, month: 1, year: 1901 }}\r\n                                                    max={{ day: 31, month: 12, year: 2022 }}\r\n                                                    dayPlaceholder=\"ДД\"\r\n                                                    monthPlaceholder=\"MM\"\r\n                                                    yearPlaceholder=\"ГГ\"\r\n                                                />\r\n                                            </FormItem>\r\n\r\n                                            <FormItem top=\"Пол\">\r\n                                                <Select\r\n                                                    placeholder=\"Выберите пол\"\r\n                                                    options={[\r\n                                                        {\r\n                                                            value: \"1\",\r\n                                                            label: \"Мужской\",\r\n                                                        },\r\n                                                        {\r\n                                                            value: \"2\",\r\n                                                            label: \"Женский\",\r\n                                                        },\r\n                                                        {\r\n                                                            value: \"3\",\r\n                                                            label: \"Другой\",\r\n                                                        },\r\n                                                    ]}\r\n                                                />\r\n                                            </FormItem>\r\n\r\n                                            {this.addressItems.map(({ label, name }) => (\r\n                                                <FormItem top={label} key={name}>\r\n                                                    <Input name={name} />\r\n                                                </FormItem>\r\n                                            ))}\r\n\r\n                                            <FormItem top=\"О себе\">\r\n                                                <Textarea />\r\n                                            </FormItem>\r\n                                            <Checkbox>\r\n                                                Согласен со всем <Link>этим</Link>\r\n                                            </Checkbox>\r\n                                            <FormItem>\r\n                                                <Button size=\"l\" stretched>\r\n                                                    Зарегистрироваться\r\n                                                </Button>\r\n                                            </FormItem>\r\n                                        </FormLayout>\r\n                                    </Group>\r\n                                </Panel>\r\n                            </View>\r\n                        </SplitLayout>\r\n                    </AppRoot>\r\n                </AdaptivityProvider>\r\n            </ConfigProvider>\r\n        );\r\n    }\r\n}\r\nexport default SignUp","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport bridge from \"@vkontakte/vk-bridge\";\r\nimport App from \"./App\";\r\nimport SignUp from \"./panels/signUp\";\r\n\r\n// Init VK  Mini App\r\nbridge.send(\"VKWebAppInit\");\r\n\r\nlocalStorage.setItem(\"user\", JSON.stringify(\"027b4656-bccc-4a0a-9508-6a9ae173bb95\"))\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// if (process.env.NODE_ENV === \"development\") {\r\n//   import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\r\n// }\r\n"],"sourceRoot":""}